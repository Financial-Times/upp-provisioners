#cloud-config

coreos:
  update:
    reboot-strategy: off
  etcd2:
    discovery: {{token}}
    heartbeat-interval: 300
    election-timeout: 3000
    advertise-client-urls: http://$private_ipv4:2379,http://$private_ipv4:4001
    initial-advertise-peer-urls: http://$private_ipv4:2380
    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001
    listen-peer-urls: http://$private_ipv4:2380,http://$private_ipv4:7001
  fleet:
    etcd_request_timeout: 3.0
    metadata: host_type=persistent,persistent_tag={{persistent_tag}}
  units:
    - name: update-engine.service
      command: stop
      mask: true
    - name: locksmithd.service
      command: stop
    - name: authorized_keys.service
      command: start
      content: |
          [Unit]
          Description=Update authorized_keys

          [Service]
          Type=oneshot
          ExecStartPre=/bin/sh -c "mkdir -p /home/core/.ssh && touch /home/core/.ssh/authorized_keys"
          ExecStart=/bin/sh -c "curl -sSL --retry 5 --retry-delay 2 -o /tmp/authorized_keys.sha512 https://raw.githubusercontent.com/Financial-Times/up-ssh-keys/master/authorized_keys.sha512"
          ExecStart=/bin/sh -c "curl -sSL --retry 5 --retry-delay 2 -o /tmp/authorized_keys https://raw.githubusercontent.com/Financial-Times/up-ssh-keys/master/authorized_keys"
          ExecStart=/bin/sh -c "cd /tmp/ && sha512sum -c authorized_keys.sha512 && cp authorized_keys /home/core/.ssh/authorized_keys && chmod 700 /home/core/.ssh && chmod 600 /home/core/.ssh/authorized_keys && chown -R core:core /home/core/.ssh"
    - name: authorized_keys.timer
      command: start
      content: |
          [Unit]
          Description=Authorized keys timer

          [Timer]
          OnBootSec=1min
          OnUnitActiveSec=1min

          [Install]
          WantedBy=timers.target
    - name: docker.service
      drop-ins:
        - name: 11-docker-opts.conf
          content: |
            [Service]
            Environment="DOCKER_OPTS=--log-driver=none --host 0.0.0.0:2375"
      command: start
    - name: etcd2.service
      command: start
    - name: fleet.service
      command: start
    - name: key-register.service
      command: start
      content: |
          [Unit]
          Description=Add secret keys to etcd2
          ConditionPathExists=!/var/lib/format-done

          [Service]
          Type=oneshot
          ExecStartPre=/bin/sh -c "while true; do etcdctl cluster-health && break || sleep 2; done"
          ExecStart=/bin/sh -c "etcdctl mk /ft/_credentials/aws/aws_access_key_id '{{ apps_aws_access_key }}'                                   >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/_credentials/aws/aws_secret_access_key '{{ apps_aws_secret_access_key }}'                        >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/_credentials/brightcove_auth '{{brightcove_auth}}'                                               >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/_credentials/cms-notifier/post-credentials '{{ cms_notifier_credentials }}'                      >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/_credentials/elb_name 'coreos-up-{{clusterid}}'                                                  >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/_credentials/varnish/htpasswd '{{ varnish_access_credentials }}'                                 >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/_credentials/konstructor/api-key '{{ konstructor_api_key }}'                                     >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/_credentials/wordpress/content_api_key '{{ wordpress_api_key }}'                                 >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/_credentials/wp '{{ wp_contentApi_key }}'                                                        >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/_credentials/tme/username '{{ tme_username }}'                                                   >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/_credentials/tme/password '{{ tme_password }}'                                                   >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/_credentials/tme/token '{{ tme_token }}'                                                         >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/config/environment_tag '{{environment_tag}}'                                                     >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/config/aws_region '{{region}}'                                                                   >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/config/splunk-forwarder/splunk_url 'https://ingest.splunk.glb.ft.com/coco-up/fleet'              >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/config/concepts-rw-s3/bucket '{{concepts_rw_s3_bucket}}'                                         >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/config/concepts-rw-s3/bucket_region '{{concepts_rw_s3_bucket_region}}'                           >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/config/services-definition-root-uri '{{services_definition_root_uri}}'                           >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/config/bertha/urls/authors '{{authors_bertha_url}}'                                              >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/config/bertha/urls/roles '{{roles_bertha_url}}'                                                  >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/config/bertha/urls/brands '{{brands_bertha_url}}'                                                >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/config/bertha/urls/video-metadata-mappings '{{mappings_bertha_url}}'                             >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/config/tme_host '{{tme_host}}'                                                                   >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/config/brightcove/account-id '{{brightcove_account_id}}'                                         >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/config/monitoring/read-urls '{{delivery_clusters_urls}}'                                         >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/config/monitoring/s3-image-bucket-urls '{{s3_image_bucket_urls}}'                                >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/config/monitoring/binary-s3-bucket '{{binary_s3_bucket}}'                                        >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/config/monitoring/pam-mat-validation-url '{{pam_mat_validation_url}}'                            >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/config/monitoring/pam-mcpm-validation-url '{{pam_mcpm_validation_url}}'                          >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/config/monitoring/pam-credential-validation-uuid '{{pam_credential_validation_uuid}}'            >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/config/monitoring/synthetic-article-uuid '{{synthetic_article_uuid}}'                            >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/config/monitoring/synthetic-article-payload '{{synthetic_article_payload}}'                      >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/config/monitoring/synthetic-list-uuid '{{synthetic_list_uuid}}'                                  >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/_credentials/publish-read/read-credentials '{{delivery_clusters_http_credentials}}'              >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/_credentials/publish-read/validator-credentials '{{pam_mat_validation_credentials}}'             >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/_credentials/factset/username '{{ factset_username }}'                                           >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/_credentials/factset/key/first_part '{{ factset_key_first_part }}'                               >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/_credentials/factset/key/second_part '{{ factset_key_second_part }}'                             >/dev/null 2>&1 || true;"

    - name: bootstrap.service
      command: start
      content: |
          [Unit]
          Description=Start fleet services
          After=fleet.service
          Requires=fleet.service
          ConditionPathExists=!/var/lib/format-done

          [Service]
          Type=oneshot
          ExecStartPre=/bin/sh -c "while true; do etcdctl cluster-health && fleetctl list-units && break || sleep 5; done"
          ExecStart=/bin/sh -c "curl -sSL --retry 5 --retry-delay 2 -o /tmp/deployer.service https://raw.githubusercontent.com/Financial-Times/coco-fleet-deployer/master/deployer.service && fleetctl start /tmp/deployer.service"
          ExecStartPost=/usr/bin/touch /var/lib/format-done
    - name: makefs.service
      command: start
      content: |
        [Unit]
        Before=vol.mount
        [Service]
        Type=oneshot
        ExecStart=/bin/bash -c "/usr/sbin/fsck -a /dev/xvdf || /usr/sbin/mkfs.ext4 /dev/xvdf"
        ExecStart=/bin/bash -c "/usr/bin/test -e /vol || /usr/bin/mkdir /vol"
    - name: vol.mount
      command: start
      content: |
        [Mount]
        What=/dev/xvdf
        Where=/vol
        Type=ext4
write_files:
  - path: /etc/systemd/system/fleet.socket.d/30-ListenStream.conf
    content: |
      [Socket]
      ListenStream=0.0.0.0:49153
  - path: /etc/motd.d/env.conf
    content: |
            This enviroment is tagged as {{environment_tag}} and is cluster {{token}}
  - path: /home/core/.toolboxrc
    owner: core
    content: |
      TOOLBOX_DOCKER_IMAGE=coco/coco-toolbox
      TOOLBOX_DOCKER_TAG=latest
      TOOLBOX_USER=root
  - path: /etc/systemd/journald.conf.d/10-override-config.conf
    content: |
      [Journal]
      MaxLevelConsole=crit
      Compress=false
      RateLimitInterval=0
      RateLimitBurst=0
  - path: "/etc/profile.d/history_timestamps.sh"
    permissions: "0755"
    owner: "root"
    content: |
      #!/bin/bash
      export HISTTIMEFORMAT="%d/%m/%y %T "
      export HISTFILESIZE=10000000
      export HISTSIZE=10000000
  - path: "/etc/profile.d/services_autocomplete.sh"
    permissions: "0755"
    owner: "root"
    content: |
      #!/bin/bash

      fleetctl list-units | tail -n +2 | cut -f 1 | tr "\n" " " > /home/core/services.list

      _services(){
                      local cur=${COMP_WORDS[COMP_CWORD]}
                      COMPREPLY=( $(compgen -W "$(<~/services.list)" -- ${cur}) )
      }
      complete -F _services fcres
      complete -F _services fcjf
      complete -F _services fcssh
  - path: "/etc/profile.d/ft_aliases.sh"
    permissions: "0755"
    owner: "root"
    content: |
      #!/bin/bash
      alias ll='ls -l'

      alias fc='fleetctl'
      alias fclm='fleetctl list-machines'
      alias fclu='fleetctl list-units'
      alias fcjf='fleetctl journal -f '
      alias fcbad='fleetctl list-units | grep -v "exited\|running\|backup\|upgrade"'

      function fclmg() { fleetctl list-machines | grep  $@ ;}
      function fclug() { fleetctl list-units | grep  $@ ;}
      function fcssh() { fleetctl ssh $@ ;}
      function fcjfl() { fleetctl journal -f --lines=$@ ; }
      function fcres() { fleetctl ssh $@ sudo systemctl restart $@ ; }
  - path: "/home/core/.ssh/config"
    permissions: "0600"
    owner: "core"
    content: |
      Host *-tunnel-up.ft.com
        User core
        ForwardAgent yes
        StrictHostKeyChecking no
        UserKnownHostsFile /dev/null
