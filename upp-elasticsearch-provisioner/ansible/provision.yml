- name: Provision ElasticSearch Domain and S3 backup bucket
  hosts: localhost
  connection: local

  vars:
    cluster_name: "{{cf_template}}-{{delivery_cluster}}"

  vars_files:
    - vault_{{aws_account}}.yml

  tasks:

    - name: Ensure S3 bucket exists
      s3_bucket:
        aws_access_key: "{{aws_access_key}}"
        aws_secret_key: "{{aws_secret_access_key}}"
        name: "{{cluster_name}}-backup"
        region: "{{aws_default_region}}"
        policy: "{{ lookup('template','files/s3-bucket-policy.json') }}"
      register: s3_bucket_output

    - debug:
        msg: "{{s3_bucket_output}}"

    - name: Create ElasticSearch cluster
      cloudformation:
        aws_access_key: "{{aws_access_key}}"
        aws_secret_key: "{{aws_secret_access_key}}"
        stack_name: "{{cluster_name}}"
        state: "present"
        region: "{{aws_default_region}}"
        template: "/cloudformation/{{cf_template}}.yml"
        template_parameters:
          EnvironmentType: "{{environment_type}}"
          ClusterName: "{{cluster_name}}"
          Region: "{{aws_default_region}}"
        tags:
          Stack: "{{cluster_name}}"
      register: es_stack_output

    - debug:
        msg: "{{es_stack_output}}"

    - name: Save ElasticSearch cluster endpoint as a variable
      set_fact:
        es_endpoint: "{{es_stack_output.stack_outputs.ESClusterEndpoint}}"

    - name: Register snapshot directory for ES snapshots
      script: register-es-snapshot-dir.py -r {{aws_default_region}} -e {{es_endpoint}} -a {{aws_access_key}} -s {{aws_secret_access_key}} -b {{cluster_name}}-backup -o {{iam_backup_role}}
      register: register_snapshot_dir_output

    - debug:
        msg: "{{register_snapshot_dir_output}}"

    - name: Restore latest ES snapshot (if requested)
      include: tasks/restore_es_snapshot.yml
      when:
        - restore_es_snapshot == "true"
