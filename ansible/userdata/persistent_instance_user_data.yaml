#cloud-config

coreos:
  update:
    reboot-strategy: off
  etcd2:
    # generate a new token for each unique cluster from https://discovery.etcd.io/new?size=3
    discovery: {{token}}
    heartbeat-interval: 300
    election-timeout: 3000
    # multi-region and multi-cloud deployments need to use $public_ipv4
    advertise-client-urls: http://$private_ipv4:2379,http://$private_ipv4:4001
    initial-advertise-peer-urls: http://$private_ipv4:2380
    # listen on both the official ports and the legacy ports
    # legacy ports can be omitted if your application doesn't depend on them
    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001
    listen-peer-urls: http://$private_ipv4:2380,http://$private_ipv4:7001
  fleet:
    # allow etcd to slow down at times
    etcd_request_timeout: 3.0
    metadata: host_type=persistent,persistent_tag={{persistent_tag}}
  units:
    - name: update-engine.service
      command: stop
      mask: true
    - name: locksmithd.service
      command: stop
    - name: authorized_keys.service
      command: start
      content: |
          [Unit]
          Description=Update authorized_keys

          [Service]
          Type=oneshot
          ExecStartPre=/bin/sh -c "mkdir -p /home/core/.ssh && touch /home/core/.ssh/authorized_keys"
          ExecStart=/bin/sh -c "curl -sSL --retry 5 --retry-delay 2 -o /tmp/authorized_keys.sha512 https://raw.githubusercontent.com/Financial-Times/up-ssh-keys/master/authorized_keys.sha512"
          ExecStart=/bin/sh -c "curl -sSL --retry 5 --retry-delay 2 -o /tmp/authorized_keys https://raw.githubusercontent.com/Financial-Times/up-ssh-keys/master/authorized_keys"
          ExecStart=/bin/sh -c "cd /tmp/ && sha512sum -c authorized_keys.sha512 && cp authorized_keys /home/core/.ssh/authorized_keys && chmod 700 /home/core/.ssh && chmod 600 /home/core/.ssh/authorized_keys && chown -R core:core /home/core/.ssh"
    - name: authorized_keys.timer
      command: start
      content: |
          [Unit]
          Description=Authorized keys timer

          [Timer]
          OnBootSec=1min
          OnUnitActiveSec=1min

          [Install]
          WantedBy=timers.target
    - name: docker.service
      drop-ins:
        - name: 11-docker-opts.conf
          content: |
            [Service]
            Environment="DOCKER_OPTS=--log-driver=none --host 0.0.0.0:2375"
    - name: swapon.service
      command: stop
      content: |
          [Unit]
          Description=Create swap

          [Service]
          Type=oneshot
          Environment="SWAPFILE=/swapfile"
          RemainAfterExit=true
          ExecStartPre=/usr/bin/touch ${SWAPFILE}
          ExecStartPre=/usr/bin/fallocate -l 4096m ${SWAPFILE}
          ExecStartPre=/usr/bin/chmod 600 ${SWAPFILE}
          ExecStartPre=/usr/sbin/mkswap ${SWAPFILE}
          ExecStartPre=/usr/sbin/losetup -f ${SWAPFILE}
          ExecStart=/usr/bin/sh -c "/sbin/swapon $(/usr/sbin/losetup -j ${SWAPFILE} | /usr/bin/cut -d : -f 1)"
          ExecStop=/usr/bin/sh -c "/sbin/swapoff $(/usr/sbin/losetup -j ${SWAPFILE} | /usr/bin/cut -d : -f 1)"
          ExecStopPost=/usr/bin/sh -c "/usr/sbin/losetup -d $(/usr/sbin/losetup -j ${SWAPFILE} | /usr/bin/cut -d : -f 1)"

          [Install]
          WantedBy=multi-user.target
    - name: etcd2.service
      command: start
    - name: fleet.service
      command: start
    - name: makefs.service
      command: start
      content: |
        [Unit]
        Before=vol.mount
        [Service]
        Type=oneshot
        ExecStart=/bin/bash -c "/usr/sbin/fsck -a /dev/xvdf || /usr/sbin/mkfs.ext4 /dev/xvdf"
        ExecStart=/bin/bash -c "/usr/bin/test -e /vol || /usr/bin/mkdir /vol"
    - name: vol.mount
      command: start
      content: |
        [Mount]
        What=/dev/xvdf
        Where=/vol
        Type=ext4
write_files:
  - path: /etc/systemd/system/fleet.socket.d/30-ListenStream.conf
    content: |
      [Socket]
      ListenStream=0.0.0.0:49153
  - path: /etc/motd.d/env.conf
    content: |
            This enviroment is tagged as {{environment_tag}} and is cluster {{token}}
  - path: /home/core/.toolboxrc
    owner: core
    content: |
      TOOLBOX_DOCKER_IMAGE=coco/coco-toolbox
      TOOLBOX_DOCKER_TAG=latest
      TOOLBOX_USER=root
  - path: /etc/systemd/journald.conf.d/10-override-config.conf
    content: |
      [Journal]
      MaxLevelConsole=crit
      Compress=false
      RateLimitInterval=0
      RateLimitBurst=0
  - path: "/etc/profile.d/history_timestamps.sh"
    permissions: "0755"
    owner: "root"
    content: |
      #!/bin/bash
      export HISTTIMEFORMAT="%d/%m/%y %T "
      export HISTFILESIZE=10000000
      export HISTSIZE=10000000
  - path: "/etc/profile.d/services_autocomplete.sh"
    permissions: "0755"
    owner: "root"
    content: |
      #!/bin/bash

      fleetctl list-units | tail -n +2 | cut -f 1 | tr "\n" " " > /home/core/services.list

      _services(){
                      local cur=${COMP_WORDS[COMP_CWORD]}
                      COMPREPLY=( $(compgen -W "$(<~/services.list)" -- ${cur}) )
      }
      complete -F _services fcres
      complete -F _services fcjf
      complete -F _services fcssh
  - path: "/etc/profile.d/ft_aliases.sh"
    permissions: "0755"
    owner: "root"
    content: |
      #!/bin/bash
      alias ll='ls -l'

      alias fc='fleetctl'
      alias fclm='fleetctl list-machines'
      alias fclu='fleetctl list-units'
      alias fcjf='fleetctl journal -f '
      alias fcbad='fleetctl list-units | grep -v "exited\|running\|backup\|upgrade"'

      function fclmg() { fleetctl list-machines | grep  $@ ;}
      function fclug() { fleetctl list-units | grep  $@ ;}
      function fcssh() { fleetctl ssh $@ ;}
      function fcjfl() { fleetctl journal -f --lines=$@ ; }
      function fcres() { fleetctl ssh $@ sudo systemctl restart $@ ; }
  - path: "/home/core/.ssh/config"
    permissions: "0600"
    owner: "core"
    content: |
      Host *-tunnel-up.ft.com
        User core
        ForwardAgent yes
        StrictHostKeyChecking no
        UserKnownHostsFile /dev/null
