Description: "Creates SNS Topic and SQS Queues for publishing concepts in UPP."

Parameters:
  EnvironmentTag:
    Type: String
    Default: "pre-prod"
  EnvironmentType:
    Type: String
    Default: "t"
  Region:
    Type: String
    Default: "eu-west-1"
  SQSConceptQueueMaxDepth:
    Type: Number
    Default: 50000

Resources:
  # Create the topic and the policy.
  SNSTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      DisplayName: !Join ["", ["Concept Publish Update Notifications - ", !Ref EnvironmentTag]]

  SNSTopicPolicy:
    Type: "AWS::SNS::TopicPolicy"
    Properties:
      PolicyDocument:
        Id: ConceptNotificationTopicPolicy
        Version: '2012-10-17'
        Statement:
          - Sid: allow-s3-publish
            Effect: Allow
            Principal:
              AWS: "*"
            Action: sns:Publish
            Resource: !Ref SNSTopic
            Condition:
              ArnLike:
                "aws:SourceArn": !Join ["" , ["arn:aws:s3:::", "upp-concept-normalised-store-", !Ref EnvironmentTag]]
          - Sid: allow-content-container-apps-publish
            Effect: Allow
            Principal:
              AWS: !Join ["", ["arn:aws:iam::", !Ref 'AWS::AccountId', ":user/content-containers-apps"]]
            Action:
              - SNS:Publish
              - SNS:GetTopicAttributes
            Resource: !Ref SNSTopic
      Topics:
        - !Ref SNSTopic

  # Create a concept SQS queue - this always happens.
  SQSDeadLetterConceptQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: !Join ["", ["upp-concept-publish-dead-letter-", !Ref EnvironmentTag, "-1"]]

  SQSConceptQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: !Join ["", ["upp-concept-publish-notifications-", !Ref EnvironmentTag, "-1"]]
      ReceiveMessageWaitTimeSeconds: 20
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt SQSDeadLetterConceptQueue.Arn
        maxReceiveCount: 5

  SQSConceptQueueOverflowAlarmTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Join ["", ["Triggered when SQS concept queue alarms"]]

  SQSConceptQueueOverflowAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Join ["", ["upp-concept-publish-notifications-alarm-", !Ref EnvironmentTag, "-1"]]
      AlarmDescription: !Join ["", ["Alarm if queue depth grows beyond ", !Ref SQSConceptQueueMaxDepth, " messages"]]
      Namespace: "AWS/SQS"
      MetricName: ApproximateNumberOfMessagesVisible
      Dimensions:
        - Name: QueueName
          Value : { "Fn::GetAtt" : [ "SQSConceptQueue", "QueueName"] }
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: !Ref SQSConceptQueueMaxDepth
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - Ref: SQSConceptQueueOverflowAlarmTopic
      InsufficientDataActions:
        - Ref: SQSConceptQueueOverflowAlarmTopic

  SQSConceptQueueOverflowAlarmSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: p2o5v3s3i6a7x0q7@financialtimes.slack.com #upp-concept-load-err channel on Slack
      Protocol: email
      TopicArn: !Ref SQSConceptQueueOverflowAlarmTopic

  SQSConceptQueueDeadletterAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Join [ "", [ "upp-concept-publish-notifications-dead-letter-alarm-", !Ref EnvironmentTag, "-1" ] ]
      AlarmDescription: !Join [ "", [ "Alarm if concepts dead letter queue contains any messages." ] ]
      Namespace: "AWS/SQS"
      MetricName: ApproximateNumberOfMessagesVisible
      Dimensions:
        - Name: QueueName
          Value: { "Fn::GetAtt": [ "SQSDeadLetterConceptQueue", "QueueName" ] }
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - Ref: SQSConceptQueueOverflowAlarmTopic
      InsufficientDataActions:
        - Ref: SQSConceptQueueOverflowAlarmTopic
      OKActions:
        - Ref: SQSConceptQueueOverflowAlarmTopic

  SQSConceptQueuePolicy:
    Type: "AWS::SQS::QueuePolicy"
    Properties:
      Queues:
        - !Ref SQSConceptQueue
      PolicyDocument:
        Version: "2012-10-17"
        Id: ConceptNotificationQueuePolicy
        Statement:
          -
            Sid: "receive-from-sns"
            Effect: "Allow"
            Principal:
              AWS: "*"
            Action: "SQS:SendMessage"
            Resource: !GetAtt SQSConceptQueue.Arn
            Condition:
              ArnEquals:
                "aws:SourceArn": !Ref SNSTopic
          -
            Sid: "communicate-with-sqs"
            Effect: "Allow"
            Principal:
              AWS: !Join ["", ["arn:aws:iam::", !Ref 'AWS::AccountId', ":user/content-containers-apps"]]
            Action: "SQS:*"
            Resource: !GetAtt SQSConceptQueue.Arn

  PrimarySubscription:
    Type: "AWS::SNS::Subscription"
    Properties:
      Endpoint: !GetAtt SQSConceptQueue.Arn
      Protocol: sqs
      TopicArn: !Ref SNSTopic

  # SQS queue and policy for concept carousel
  ConceptCarouselQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: !Join ["", ["upp-concept-carousel-queue-", !Ref EnvironmentTag]]
      ReceiveMessageWaitTimeSeconds: 20

  ConceptCarouselQueuePolicy:
    Type: "AWS::SQS::QueuePolicy"
    Properties:
      Queues:
        - !Ref ConceptCarouselQueue
      PolicyDocument:
        Version: "2012-10-17"
        Id: ConceptCarouselQueuePolicy
        Statement:
          - Sid: "communicate-with-carousel-queue"
            Effect: "Allow"
            Principal:
              AWS: !Join ["", ["arn:aws:iam::", !Ref 'AWS::AccountId', ":user/content-containers-apps"]]
            Action: "SQS:*"
            Resource: !GetAtt ConceptCarouselQueue.Arn

Outputs:
  ConceptTopicARN:
    Description: The SNSTopic ARN
    Value: !Ref SNSTopic
