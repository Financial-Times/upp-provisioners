Description: "Creates S3 Bucket, SNS Topic and SQS Queues for publishing concepts in UPP."

Parameters:
  EnvironmentTag:
    Type: String
    Default: "pre-prod"
  EnvironmentType:
    Type: String
    Default: "t"
  Region:
    Type: String
    Default: "Secondary region"

Resources:
  # Create the topic and the policy.
  SNSTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      DisplayName: !Join ["", ["Concept Publish Update Notifications - ", !Ref EnvironmentTag]]

  SNSTopicPolicy:
    Type: "AWS::SNS::TopicPolicy"
    Properties:
      PolicyDocument:
        Id: ConceptNotificationTopicPolicy
        Version: '2012-10-17'
        Statement:
          - Sid: allow-s3-publish
            Effect: Allow
            Principal:
              AWS: "*"
            Action: sns:Publish
            Resource: !Ref SNSTopic
            Condition:
              ArnLike:
                "aws:SourceArn": !Join ["" , ["arn:aws:s3:::", "upp-concept-normalised-store-", !Ref EnvironmentTag]]
          - Sid: allow-content-container-apps-publish
            Effect: Allow
            Principal:
              AWS: !Join ["", ["arn:aws:iam::", !Ref 'AWS::AccountId', ":user/content-containers-apps"]]
            Action:
              - SNS:Publish
              - SNS:GetTopicAttributes
            Resource: !Ref SNSTopic
      Topics:
        - !Ref SNSTopic

  # Create a concept SQS queue - this always happens.
  SQSDeadLetterConceptQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: !Join ["", ["upp-concept-publish-dead-letter-", !Ref EnvironmentTag, "-1"]]

  SQSConceptQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: !Join ["", ["upp-concept-publish-notifications-", !Ref EnvironmentTag, "-1"]]
      ReceiveMessageWaitTimeSeconds: 20
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt SNSDeadLetterConceptQueue.Arn
        maxReceiveCount: 5

  SQSConceptQueuePolicy:
    Type: "AWS::SQS::QueuePolicy"
    Properties:
      Queues:
        - !Ref SQSConceptQueue
      PolicyDocument:
        Version: "2012-10-17"
        Id: ConceptNotificationQueuePolicy
        Statement:
          -
            Sid: "receive-from-sns"
            Effect: "Allow"
            Principal:
              AWS: "*"
            Action: "SQS:SendMessage"
            Resource: !GetAtt SQSConceptQueue.Arn
            Condition:
              ArnEquals:
                "aws:SourceArn": !Ref SNSTopic
          -
            Sid: "communicate-with-sqs"
            Effect: "Allow"
            Principal:
              AWS: !Join ["", ["arn:aws:iam::", !Ref 'AWS::AccountId', ":user/content-containers-apps"]]
            Action: "SQS:*"
            Resource: !GetAtt SQSConceptQueue.Arn

# Subscribe the concept queue to the topic
  SQSSubscription:
    Type: "AWS::SNS::Subscription"
    Properties:
      Endpoint: !GetAtt SQSConceptQueue.Arn
      Protocol: sqs
      TopicArn: !Ref SNSTopic

  # Create the S3 bucket with the notifications.
  S3ConceptPublish:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Join [ "", ["upp-concept-normalised-store-", !Ref EnvironmentTag]]
      AccessControl: AuthenticatedRead
      NotificationConfiguration:
        TopicConfigurations:
          - Event: "s3:ObjectCreated:*"
            Topic: !Ref SNSTopic
    # The topic policy has to be created before the S3 bucket
    DependsOn: "SNSTopicPolicy"

  # Create the concordance store table.
  ConcordanceStoreDynamoDB:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
      - AttributeName: "conceptId"
        AttributeType: "S"
      KeySchema:
      - AttributeName: "conceptId"
        KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: !Join [ "", ["upp-concordance-store-", !Ref EnvironmentTag]]

  # Create the concept notification stream
  ConceptNotificationStream:
    Type: "AWS::Kinesis::Stream"
    Properties:
      Name: !Join [ "", ["upp-concept-notification-stream-", !Ref EnvironmentTag]]
      RetentionPeriodHours: 24
      ShardCount: 1
      Tags:
        - Key: "systemCode"
          Value: "upp"
        - Key: "teamDL"
          Value: "universal.publishing@ft.com"
        - Key: "environment"
          Value: !Ref EnvironmentType
        - Key: "description"
          Value: !Join ["", ["Concept Notification Stream - ", !Ref EnvironmentTag]]

  # DynamoDB autoscaling for read throughput
  ReadCapacityScalableTarget:
    Type: "AWS::ApplicationAutoScaling::ScalableTarget"
    Properties:
      MaxCapacity: 300
      MinCapacity: 5
      ResourceId: !Join
        - /
        - - table
          - !Ref ConcordanceStoreDynamoDB
      RoleARN: !Join ["", ["arn:aws:iam::", !Ref 'AWS::AccountId', ":role/service-role/DynamoDBAutoscaleRole"]]
      ScalableDimension: dynamodb:table:ReadCapacityUnits
      ServiceNamespace: dynamodb
  ReadScalingPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: ReadAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ReadCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 80.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBReadCapacityUtilization

  # DynamoDB autoscaling for write throughput
  WriteCapacityScalableTarget:
    Type: "AWS::ApplicationAutoScaling::ScalableTarget"
    Properties:
      MaxCapacity: 300
      MinCapacity: 5
      ResourceId: !Join
        - /
        - - table
          - !Ref ConcordanceStoreDynamoDB
      RoleARN: !Join ["", ["arn:aws:iam::", !Ref 'AWS::AccountId', ":role/service-role/DynamoDBAutoscaleRole"]]
      ScalableDimension: dynamodb:table:WriteCapacityUnits
      ServiceNamespace: dynamodb
  WriteScalingPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: WriteAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref WriteCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 80.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBWriteCapacityUtilization

# SQS queue, policy and dead letter queue for concept carousel
  ConceptCarouselDeadLetterQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: !Join ["", ["upp-concept-carousel-dead-letter-", !Ref EnvironmentTag]]

  ConceptCarouselQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: !Join ["", ["upp-concept-carousel-queue-", !Ref EnvironmentTag]]
      ReceiveMessageWaitTimeSeconds: 20
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ConceptCarouselDeadLetterQueue.Arn
        maxReceiveCount: 5

  ConceptCarouselQueuePolicy:
    Type: "AWS::SQS::QueuePolicy"
    Properties:
      Queues:
        - !Ref ConceptCarouselQueue
      PolicyDocument:
        Version: "2012-10-17"
        Id: ConceptCarouselQueuePolicy
        Statement:
          - Sid: "communicate-with-carousel-queue"
            Effect: "Allow"
            Principal:
              AWS: !Join ["", ["arn:aws:iam::", !Ref 'AWS::AccountId', ":user/content-containers-apps"]]
            Action: "SQS:*"
            Resource: !GetAtt ConceptCarouselQueue.Arn

Outputs:
  SNSTopic1ARN:
    Description: The SNSTopic ARN
    Value: !Ref SNSTopic
