#!/bin/bash

# ssh-tun0 script routes traffic to specified host via VPN tunnel interface
# Script provides SSH access to AWS instances where access is limited to certain source IPs by routing traffic to AWS via VPN tunnel

IPV4_REGEX="(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)"
VPN_IF="$(echo $0 | grep -o tun.)"  # Extract tunnel interface name from script name, eg. ssh-tun0.sh returns "tun0". If your tunnel interface is other than tun0 don't fiddle with script just rename it accordingly, eg. ssh-tun1.
RECORD="" # Keeps record of added ip route value
SUDO="" # Sudo prefix placeholder

function usage() {
cat <<EOF
Author: jussi.heinonen@ft.com, 15.4.2016

USAGE: ssh-tun0 <username>@<hostname or ipaddress>

 Script logic in nutshell:
 - Check that argument was provided
 - Resolve ip address belonging to target host
 - Verify VPN tunnel interface is up
 - Create ip route record for host via tunnel interface
 - Establishes SSH session to given host
 - On termination prompt whether to remove ip route record from routing table

EOF
}

function addRecord () {
  INPUT="$@"
  if [[ "$(recordExists ${INPUT})" -eq "1" ]]; then
    echo "Adding route ${INPUT}"
    ${SUDO} ip route add ${INPUT}
    if [[ "$(recordExists ${INPUT})" -eq "0" ]]; then
      echo "Route ${INPUT} successfully added"
    else
      errorAndExit "Failed to add route ${INPUT}" 1
    fi
  else
    echo "Route ${INPUT} already exists. Not adding new record."
  fi
}

function errorAndExit() {
  echo $1
  exit $2
}

function ctrl_c() { # Execute function on Ctrl+C 
  read -p "Do you want to remove routing table record ${RECORD}? [y/n]: " answer
  if [[ "${answer}" == "y" ]]; then
    removeRecord "${RECORD}"
  fi
  exit 0
}

function openSSHSession () {
  ssh $1
}

function recordExists () {
  exist="$(${SUDO} ip route show $@)"
  if [[ -z ${exist} ]]; then
    echo 1
  else
    echo 0
  fi
}

function removeRecord () { # Removes routing table record
  INPUT="$@"
  if [[ "$(recordExists ${INPUT})" -eq "0" ]]; then
    ${SUDO} ip route del ${INPUT}
    if [[ "$(recordExists ${INPUT})" -eq "1" ]]; then
      echo "Route ${INPUT} successfully deleted"
    else
      errorAndExit "Failed to delete route ${INPUT}" 1
    fi
  fi
}

function setSudoPrefix () { # Set sudo prefix if non-root user and sudo binary is found
  SUDO=$(which sudo)
  if [[ ( "${USER}" != "root" ) && ( ! -z "${SUDO}" ) ]]; then
    echo "Setting sudo prefix ${SUDO} for user ${USER}"
  else
    echo "Setting empty sudo prefix for user ${USER}"
  fi
}

trap ctrl_c SIGINT # Call function ctrl_c on Ctrl+C

if [[ -z $1 ]]; then # Check arguments count
  usage
  exit 0
fi

setSudoPrefix

if [[ "$(echo $1 | grep .@ >/dev/null ; echo $?)" -eq "1" ]]; then # set/unset USERNAME and SSH_SERVER variables
  unset USERNAME
  SSH_SERVER="$(echo $1 | tr -d @)"
else
  USERNAME="$(echo $1 | cut -d @ -f 1)"
  SSH_SERVER="$(echo $1 | cut -d @ -f 2)"
fi

if [[ "$(echo ${SSH_SERVER} | grep -E ${IPV4_REGEX} >/dev/null ; echo $?)" -eq "1" ]]; then # Validate whether hostname is IP address or hostname. Look up IP address if hostname was provided.
  echo "Resolving IP for hostname ${SSH_SERVER}"
  IPADDR="$(dig ${SSH_SERVER} +short)"
  if [[ -z ${IPADDR} ]]; then
    errorAndExit "Failed to resolve IP for hostname ${SSH_SERVER}. Exit 1." 1
  else
    echo "ssh server host ${SSH_SERVER} has IP ${IPADDR}"
  fi
else
  IPADDR="${SSH_SERVER}"
  echo "ssh server IP is ${IPADDR}"
fi

if [[ "$(ifconfig ${VPN_IF} >/dev/null ; echo $?)" -eq "1" ]]; then # Check whether VPN tunnel interface is up
  errorAndExit "No active VPN interface ${VPN_IF} found. Exit 1." 1
else
  echo "Found active VPN interface ${VPN_IF}"
fi

RECORD="${IPADDR}/32 dev ${VPN_IF}" # Set value of routing table record so it can be easily added and removed with variable reference

addRecord ${RECORD} # Add routing table record

if [[ -z "${USERNAME}" ]]; then # Establish SSH session with or without username
  openSSHSession "${IPADDR}"
else
  openSSHSession "${USERNAME}@${IPADDR}"
fi

ctrl_c # Prompt for routing table record removal
