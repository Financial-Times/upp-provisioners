#cloud-config

coreos:
  update:
    reboot-strategy: off
  etcd2:
    # generate a new token for each unique cluster from https://discovery.etcd.io/new?size=3
    discovery: {{token}}
    # multi-region and multi-cloud deployments need to use $public_ipv4
    advertise-client-urls: http://$private_ipv4:2379,http://$private_ipv4:4001
    initial-advertise-peer-urls: http://$private_ipv4:2380
    # listen on both the official ports and the legacy ports
    # legacy ports can be omitted if your application doesn't depend on them
    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001
    listen-peer-urls: http://$private_ipv4:2380,http://$private_ipv4:7001
  fleet:
    # allow etcd to slow down at times
    etcd_request_timeout: 3.0
    metadata: host_type=stateless
  units:
    - name: update-engine.service
      command: stop
      mask: true
    - name: locksmithd.service
      command: stop
    - name: authorized_keys.service
      command: start
      content: |
          [Unit]
          Description=Update authorized_keys

          [Service]
          Type=oneshot
          ExecStartPre=/bin/sh -c "mkdir -p /home/core/.ssh && touch /home/core/.ssh/authorized_keys"
          ExecStart=/bin/sh -c "curl -sSL --retry 5 --retry-delay 2 -o /tmp/authorized_keys.sha512 https://raw.githubusercontent.com/Financial-Times/up-ssh-keys/master/authorized_keys.sha512"
          ExecStart=/bin/sh -c "curl -sSL --retry 5 --retry-delay 2 -o /tmp/authorized_keys https://raw.githubusercontent.com/Financial-Times/up-ssh-keys/master/authorized_keys"
          ExecStart=/bin/sh -c "cd /tmp/ && sha512sum -c authorized_keys.sha512 && cp authorized_keys /home/core/.ssh/authorized_keys && chmod 700 /home/core/.ssh && chmod 600 /home/core/.ssh/authorized_keys && chown -R core:core /home/core/.ssh"
    - name: authorized_keys.timer
      command: start
      content: |
          [Unit]
          Description=Authorized keys timer

          [Timer]
          OnBootSec=1min
          OnUnitActiveSec=1min

          [Install]
          WantedBy=timers.target
    - name: docker.service
      drop-ins:
        - name: 10-turn-off-logging.conf
          content: |
            [Service]
            Environment="DOCKER_OPTS=--log-driver=none"
      command: start
    - name: swapon.service
      command: stop
      content: |
          [Unit]
          Description=Create swap

          [Service]
          Type=oneshot
          Environment="SWAPFILE=/swapfile"
          RemainAfterExit=true
          ExecStartPre=/usr/bin/touch ${SWAPFILE}
          ExecStartPre=/usr/bin/fallocate -l 4096m ${SWAPFILE}
          ExecStartPre=/usr/bin/chmod 600 ${SWAPFILE}
          ExecStartPre=/usr/sbin/mkswap ${SWAPFILE}
          ExecStartPre=/usr/sbin/losetup -f ${SWAPFILE}
          ExecStart=/usr/bin/sh -c "/sbin/swapon $(/usr/sbin/losetup -j ${SWAPFILE} | /usr/bin/cut -d : -f 1)"
          ExecStop=/usr/bin/sh -c "/sbin/swapoff $(/usr/sbin/losetup -j ${SWAPFILE} | /usr/bin/cut -d : -f 1)"
          ExecStopPost=/usr/bin/sh -c "/usr/sbin/losetup -d $(/usr/sbin/losetup -j ${SWAPFILE} | /usr/bin/cut -d : -f 1)"

          [Install]
          WantedBy=multi-user.target
    - name: etcd2.service
      command: start
    - name: fleet.service
      command: start
    - name: key-register.service
      command: start
      content: |
          [Unit]
          Description=Add secret keys to etcd2
          # Only run on first boot (creates the file at the end of the execution)
          ConditionPathExists=!/var/lib/format-done

          [Service]
          Type=oneshot
          ExecStartPre=/bin/sh -c "while true; do etcdctl cluster-health && break || sleep 2; done"
          ExecStart=/bin/sh -c "etcdctl mk /ft/_credentials/aws/aws_access_key_id '{{ apps_aws_access_key }}'                                   >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/_credentials/aws/aws_secret_access_key '{{ apps_aws_secret_access_key }}'                        >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/_credentials/cms-notifier/post-credentials '{{ cms_notifier_credentials }}'                      >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/_credentials/elb_name 'coreos-up-{{clusterid}}'                                                  >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/_credentials/varnish/htpasswd '{{ varnish_access_credentials }}'                                 >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/_credentials/kafka-bridge/authorization_key '{{bridging_message_queue_proxy_authorization_key}}' >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/_credentials/konstructor/api-key '{{ konstructor_api_key }}'                                     >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/_credentials/metadata-services/username '{{ metadata_services_username }}'                       >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/_credentials/metadata-services/password '{{ metadata_services_password }}'                       >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/_credentials/methode-api/authorization_key '{{ methode_api_proxy_authorization_key }}'           >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/_credentials/tme/username '{{ tme_username }}'                                                   >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/_credentials/tme/password '{{ tme_password }}'                                                   >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/_credentials/tme/token '{{ tme_token }}'                                                         >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/_credentials/ces/auth '{{ ces_credentials }}'                                                    >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/_credentials/wordpress/content_api_key '{{ wordpress_api_key }}'                                 >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/_credentials/wp '{{ wp_contentApi_key }}'                                                        >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/_credentials/kafka-bridge-pub-pre-prod/authorization_key '{{ pub_pre_prod_credentials }}'        >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/_credentials/kafka-bridge-pub-prod/authorization_key '{{ pub_prod_credentials }}'                >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/_credentials/upp-gateway/authorization_key '{{ upp_gateway_credentials }}'                       >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/config/environment_tag '{{environment_tag}}'                                                     >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/config/cluster_id '{{clusterid}}'                                                                >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/config/api_host '{{api_host}}'                                                                   >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/config/aws_region '{{region}}'                                                                   >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/config/cache-max-age 10                                                                          >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/config/splunk-forwarder/splunk_url 'https://ingest.splunk.glb.ft.com/coco-up/fleet'              >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/config/splunk-forwarder/splunk_hec_url '{{splunk_hec_url}}'                                      >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/config/splunk-forwarder/splunk_hec_token '{{splunk_hec_token}}'                                  >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/config/services-definition-root-uri '{{services_definition_root_uri}}'                           >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/config/binary-writer/bucket '{{binary_writer_bucket}}'                                           >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/config/generic-rw-s3/bucket '{{generic_rw_bucket}}'                                              >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/config/synthetic-image-publication-monitor-aws/test-uuid '{{aws_image_monitor_test_uuid}}'       >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/config/synthetic-image-publication-monitor-coco/test-uuid '{{coco_image_monitor_test_uuid}}'     >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/config/kafka-bridge/ucs_queue_proxy_addrs '{{bridging_message_queue_proxy}}'                     >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/config/upp-gateway/host '{{upp_gateway_host}}'                                                   >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/config/upp-gateway/port '{{upp_gateway_port}}'                                                   >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/config/ces/host '{{ces_host}}'                                                                   >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/config/aws_es_endpoint '{{aws_es_endpoint}}'                                                     >/dev/null 2>&1 || true;"
          ExecStart=/bin/sh -c "etcdctl mk /ft/config/methode-api '{{methode_api}}'                                                             >/dev/null 2>&1 || true;"
    - name: bootstrap.service
      command: start
      content: |
          [Unit]
          Description=Start fleet services
          After=fleet.service
          Requires=fleet.service
          # Only run on first boot
          ConditionPathExists=!/var/lib/format-done

          [Service]
          Type=oneshot
          ExecStartPre=/bin/sh -c "while true; do etcdctl cluster-health && fleetctl list-units && break || sleep 5; done"
          ExecStart=/bin/sh -c "curl -sSL --retry 5 --retry-delay 2 -o /tmp/deployer.service https://raw.githubusercontent.com/Financial-Times/coco-fleet-deployer/master/deployer.service && fleetctl start /tmp/deployer.service"
          ExecStartPost=/usr/bin/touch /var/lib/format-done

write_files:
  - path: /etc/systemd/system/fleet.socket.d/30-ListenStream.conf
    content: |
      [Socket]
      ListenStream=0.0.0.0:49153
  - path: /etc/motd.d/env.conf
    content: |
            This enviroment is tagged as {{environment_tag}} and is cluster {{token}}
  - path: /home/core/.toolboxrc
    owner: core
    content: |
      TOOLBOX_DOCKER_IMAGE=coco/coco-toolbox
      TOOLBOX_DOCKER_TAG=latest
      TOOLBOX_USER=root
  - path: /etc/systemd/journald.conf.d/10-override-config.conf
    content: |
      [Journal]
      MaxLevelConsole=crit
      Compress=false
      RateLimitInterval=0
      RateLimitBurst=0
  - path: "/etc/profile.d/history_timestamps.sh"
    permissions: "0755"
    owner: "root"
    content: |
      #!/bin/bash
      export HISTTIMEFORMAT="%d/%m/%y %T "
      export HISTFILESIZE=10000000
      export HISTSIZE=10000000
  - path: "/etc/profile.d/services_autocomplete.sh"
    permissions: "0755"
    owner: "root"
    content: |
      #!/bin/bash

      fleetctl list-units | tail -n +2 | cut -f 1 | tr "\n" " " > /home/core/services.list

      _services(){
                      local cur=${COMP_WORDS[COMP_CWORD]}
                      COMPREPLY=( $(compgen -W "$(<~/services.list)" -- ${cur}) )
      }
      complete -F _services fcres
      complete -F _services fcjf
      complete -F _services fcssh
  - path: "/etc/profile.d/ft_aliases.sh"
    permissions: "0755"
    owner: "root"
    content: |
      #!/bin/bash
      alias ll='ls -l'

      alias fc='fleetctl'
      alias fclm='fleetctl list-machines'
      alias fclu='fleetctl list-units'
      alias fcjf='fleetctl journal -f '
      alias fcbad='fleetctl list-units | grep -v "exited\|running\|backup\|upgrade"'

      function fclmg() { fleetctl list-machines | grep  $@ ;}
      function fclug() { fleetctl list-units | grep  $@ ;}
      function fcssh() { fleetctl ssh $@ ;}
      function fcjfl() { fleetctl journal -f --lines=$@ ; }
      function fcres() { fleetctl ssh $@ sudo systemctl restart $@ ; }
  - path: "/home/core/.ssh/config"
    permissions: "0600"
    owner: "core"
    content: |
      Host *-tunnel-up.ft.com
        User core
        ForwardAgent yes
        StrictHostKeyChecking no
        UserKnownHostsFile /dev/null
